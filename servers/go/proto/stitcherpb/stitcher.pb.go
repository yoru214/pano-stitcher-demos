// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: stitcher.proto

package stitcherpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImageData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Content       []byte                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	mi := &file_stitcher_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_stitcher_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_stitcher_proto_rawDescGZIP(), []int{0}
}

func (x *ImageData) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ImageData) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type StitchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Images        []*ImageData           `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	Format        string                 `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"` // e.g. "webp", "jpg", "jpeg"
	Key           string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StitchRequest) Reset() {
	*x = StitchRequest{}
	mi := &file_stitcher_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StitchRequest) ProtoMessage() {}

func (x *StitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stitcher_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StitchRequest.ProtoReflect.Descriptor instead.
func (*StitchRequest) Descriptor() ([]byte, []int) {
	return file_stitcher_proto_rawDescGZIP(), []int{1}
}

func (x *StitchRequest) GetImages() []*ImageData {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *StitchRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *StitchRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type StitchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	StitchedImage []byte                 `protobuf:"bytes,2,opt,name=stitched_image,json=stitchedImage,proto3" json:"stitched_image,omitempty"`
	ContentType   string                 `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StitchResponse) Reset() {
	*x = StitchResponse{}
	mi := &file_stitcher_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StitchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StitchResponse) ProtoMessage() {}

func (x *StitchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stitcher_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StitchResponse.ProtoReflect.Descriptor instead.
func (*StitchResponse) Descriptor() ([]byte, []int) {
	return file_stitcher_proto_rawDescGZIP(), []int{2}
}

func (x *StitchResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StitchResponse) GetStitchedImage() []byte {
	if x != nil {
		return x.StitchedImage
	}
	return nil
}

func (x *StitchResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *StitchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_stitcher_proto protoreflect.FileDescriptor

var file_stitcher_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x09, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x66, 0x0a,
	0x0d, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x74,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x48, 0x0a, 0x08, 0x53, 0x74, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x12, 0x5a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_stitcher_proto_rawDescOnce sync.Once
	file_stitcher_proto_rawDescData []byte
)

func file_stitcher_proto_rawDescGZIP() []byte {
	file_stitcher_proto_rawDescOnce.Do(func() {
		file_stitcher_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stitcher_proto_rawDesc), len(file_stitcher_proto_rawDesc)))
	})
	return file_stitcher_proto_rawDescData
}

var file_stitcher_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_stitcher_proto_goTypes = []any{
	(*ImageData)(nil),      // 0: stitcher.ImageData
	(*StitchRequest)(nil),  // 1: stitcher.StitchRequest
	(*StitchResponse)(nil), // 2: stitcher.StitchResponse
}
var file_stitcher_proto_depIdxs = []int32{
	0, // 0: stitcher.StitchRequest.images:type_name -> stitcher.ImageData
	1, // 1: stitcher.Stitcher.Process:input_type -> stitcher.StitchRequest
	2, // 2: stitcher.Stitcher.Process:output_type -> stitcher.StitchResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_stitcher_proto_init() }
func file_stitcher_proto_init() {
	if File_stitcher_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stitcher_proto_rawDesc), len(file_stitcher_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stitcher_proto_goTypes,
		DependencyIndexes: file_stitcher_proto_depIdxs,
		MessageInfos:      file_stitcher_proto_msgTypes,
	}.Build()
	File_stitcher_proto = out.File
	file_stitcher_proto_goTypes = nil
	file_stitcher_proto_depIdxs = nil
}
